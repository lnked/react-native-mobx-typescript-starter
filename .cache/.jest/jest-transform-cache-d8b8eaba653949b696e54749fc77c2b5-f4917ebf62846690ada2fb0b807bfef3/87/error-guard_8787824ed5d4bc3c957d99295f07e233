d8d14148ff0f5369a0e58c5ee1c27341
"use strict";

var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    name = name || fun.name || '<generated guard>';

    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsIkVycm9yVXRpbHMiLCJzZXRHbG9iYWxIYW5kbGVyIiwiZnVuIiwiZ2V0R2xvYmFsSGFuZGxlciIsInJlcG9ydEVycm9yIiwiZXJyb3IiLCJyZXBvcnRGYXRhbEVycm9yIiwiYXBwbHlXaXRoR3VhcmQiLCJjb250ZXh0IiwiYXJncyIsImFwcGx5IiwiYXBwbHlXaXRoR3VhcmRJZk5lZWRlZCIsImluR3VhcmQiLCJndWFyZCIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImd1YXJkZWQiLCJhcmd1bWVudHMiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiI7O0FBV0EsSUFBSUEsUUFBUSxHQUFHLENBQWY7O0FBT0EsSUFBSUMsY0FBYyxHQUFHLFNBQVNDLE9BQVQsQ0FBaUJDLENBQWpCLEVBQW9CO0FBQ3ZDLFFBQU1BLENBQU47QUFDRCxDQUZEOztBQVlBLElBQU1DLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsZ0JBRGlCLDRCQUNBQyxHQURBLEVBQ0s7QUFDcEJMLElBQUFBLGNBQWMsR0FBR0ssR0FBakI7QUFDRCxHQUhnQjtBQUlqQkMsRUFBQUEsZ0JBSmlCLDhCQUlFO0FBQ2pCLFdBQU9OLGNBQVA7QUFDRCxHQU5nQjtBQU9qQk8sRUFBQUEsV0FQaUIsdUJBT0xDLEtBUEssRUFPRTtBQUNqQlIsSUFBQUEsY0FBYyxJQUFJQSxjQUFjLENBQUNRLEtBQUQsQ0FBaEM7QUFDRCxHQVRnQjtBQVVqQkMsRUFBQUEsZ0JBVmlCLDRCQVVBRCxLQVZBLEVBVU87QUFDdEJSLElBQUFBLGNBQWMsSUFBSUEsY0FBYyxDQUFDUSxLQUFELEVBQVEsSUFBUixDQUFoQztBQUNELEdBWmdCO0FBYWpCRSxFQUFBQSxjQWJpQiwwQkFhRkwsR0FiRSxFQWFHTSxPQWJILEVBYVlDLElBYlosRUFha0I7QUFDakMsUUFBSTtBQUNGYixNQUFBQSxRQUFRO0FBQ1IsYUFBT00sR0FBRyxDQUFDUSxLQUFKLENBQVVGLE9BQVYsRUFBbUJDLElBQW5CLENBQVA7QUFDRCxLQUhELENBR0UsT0FBT1YsQ0FBUCxFQUFVO0FBQ1ZDLE1BQUFBLFVBQVUsQ0FBQ0ksV0FBWCxDQUF1QkwsQ0FBdkI7QUFDRCxLQUxELFNBS1U7QUFDUkgsTUFBQUEsUUFBUTtBQUNUOztBQUNELFdBQU8sSUFBUDtBQUNELEdBdkJnQjtBQXdCakJlLEVBQUFBLHNCQXhCaUIsa0NBd0JNVCxHQXhCTixFQXdCV00sT0F4QlgsRUF3Qm9CQyxJQXhCcEIsRUF3QjBCO0FBQ3pDLFFBQUlULFVBQVUsQ0FBQ1ksT0FBWCxFQUFKLEVBQTBCO0FBQ3hCLGFBQU9WLEdBQUcsQ0FBQ1EsS0FBSixDQUFVRixPQUFWLEVBQW1CQyxJQUFuQixDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0xULE1BQUFBLFVBQVUsQ0FBQ08sY0FBWCxDQUEwQkwsR0FBMUIsRUFBK0JNLE9BQS9CLEVBQXdDQyxJQUF4QztBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBL0JnQjtBQWdDakJHLEVBQUFBLE9BaENpQixxQkFnQ1A7QUFDUixXQUFPaEIsUUFBUDtBQUNELEdBbENnQjtBQW1DakJpQixFQUFBQSxLQW5DaUIsaUJBbUNYWCxHQW5DVyxFQW1DTlksSUFuQ00sRUFtQ0FOLE9BbkNBLEVBbUNTO0FBQ3hCLFFBQUksT0FBT04sR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCYSxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxxREFBYixFQUFvRWQsR0FBcEU7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFDRFksSUFBQUEsSUFBSSxHQUFHQSxJQUFJLElBQUlaLEdBQUcsQ0FBQ1ksSUFBWixJQUFvQixtQkFBM0I7O0FBQ0EsYUFBU0csT0FBVCxHQUFtQjtBQUNqQixhQUFPakIsVUFBVSxDQUFDTyxjQUFYLENBQ0xMLEdBREssRUFFTE0sT0FBTyxJQUFJLElBRk4sRUFHTFUsU0FISyxFQUlMLElBSkssRUFLTEosSUFMSyxDQUFQO0FBT0Q7O0FBRUQsV0FBT0csT0FBUDtBQUNEO0FBcERnQixDQUFuQjtBQXVEQUUsTUFBTSxDQUFDbkIsVUFBUCxHQUFvQkEsVUFBcEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBwb2x5ZmlsbFxuICogQG5vbGludFxuICovXG5cbmxldCBfaW5HdWFyZCA9IDA7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgZXJyb3IgaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIHdlIGVuY291bnRlciBhbiBleGNlcHRpb25cbiAqIHdoZW4gbG9hZGluZyBhIG1vZHVsZS4gVGhpcyB3aWxsIHJlcG9ydCBhbnkgZXJyb3JzIGVuY291bnRlcmVkIGJlZm9yZVxuICogRXhjZXB0aW9uc01hbmFnZXIgaXMgY29uZmlndXJlZC5cbiAqL1xubGV0IF9nbG9iYWxIYW5kbGVyID0gZnVuY3Rpb24gb25FcnJvcihlKSB7XG4gIHRocm93IGU7XG59O1xuXG4vKipcbiAqIFRoZSBwYXJ0aWN1bGFyIHJlcXVpcmUgcnVudGltZSB0aGF0IHdlIGFyZSB1c2luZyBsb29rcyBmb3IgYSBnbG9iYWxcbiAqIGBFcnJvclV0aWxzYCBvYmplY3QgYW5kIGlmIGl0IGV4aXN0cywgdGhlbiBpdCByZXF1aXJlcyBtb2R1bGVzIHdpdGggdGhlXG4gKiBlcnJvciBoYW5kbGVyIHNwZWNpZmllZCB2aWEgRXJyb3JVdGlscy5zZXRHbG9iYWxIYW5kbGVyIGJ5IGNhbGxpbmcgdGhlXG4gKiByZXF1aXJlIGZ1bmN0aW9uIHdpdGggYXBwbHlXaXRoR3VhcmQuIFNpbmNlIHRoZSByZXF1aXJlIG1vZHVsZSBpcyBsb2FkZWRcbiAqIGJlZm9yZSBhbnkgb2YgdGhlIG1vZHVsZXMsIHRoaXMgRXJyb3JVdGlscyBtdXN0IGJlIGRlZmluZWQgKGFuZCB0aGUgaGFuZGxlclxuICogc2V0KSBnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIGFueXRoaW5nLlxuICovXG5jb25zdCBFcnJvclV0aWxzID0ge1xuICBzZXRHbG9iYWxIYW5kbGVyKGZ1bikge1xuICAgIF9nbG9iYWxIYW5kbGVyID0gZnVuO1xuICB9LFxuICBnZXRHbG9iYWxIYW5kbGVyKCkge1xuICAgIHJldHVybiBfZ2xvYmFsSGFuZGxlcjtcbiAgfSxcbiAgcmVwb3J0RXJyb3IoZXJyb3IpIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvcik7XG4gIH0sXG4gIHJlcG9ydEZhdGFsRXJyb3IoZXJyb3IpIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvciwgdHJ1ZSk7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICBfaW5HdWFyZCsrO1xuICAgICAgcmV0dXJuIGZ1bi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBFcnJvclV0aWxzLnJlcG9ydEVycm9yKGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaW5HdWFyZC0tO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgYXBwbHlXaXRoR3VhcmRJZk5lZWRlZChmdW4sIGNvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoRXJyb3JVdGlscy5pbkd1YXJkKCkpIHtcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoZnVuLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGluR3VhcmQoKSB7XG4gICAgcmV0dXJuIF9pbkd1YXJkO1xuICB9LFxuICBndWFyZChmdW4sIG5hbWUsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKCdBIGZ1bmN0aW9uIG11c3QgYmUgcGFzc2VkIHRvIEVycm9yVXRpbHMuZ3VhcmQsIGdvdCAnLCBmdW4pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lIHx8IGZ1bi5uYW1lIHx8ICc8Z2VuZXJhdGVkIGd1YXJkPic7XG4gICAgZnVuY3Rpb24gZ3VhcmRlZCgpIHtcbiAgICAgIHJldHVybiBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKFxuICAgICAgICBmdW4sXG4gICAgICAgIGNvbnRleHQgfHwgdGhpcyxcbiAgICAgICAgYXJndW1lbnRzLFxuICAgICAgICBudWxsLFxuICAgICAgICBuYW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3VhcmRlZDtcbiAgfSxcbn07XG5cbmdsb2JhbC5FcnJvclV0aWxzID0gRXJyb3JVdGlscztcbiJdfQ==