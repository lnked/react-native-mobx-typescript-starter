8458628db23c4b359b76df6069bc7042
'use strict';

var mockNativeFunction = function mockNativeFunction(methodName) {
  var warned = false;
  return function () {
    if (warned) {
      return;
    }

    warned = true;
    console.warn('Calling .' + methodName + '() in the test renderer environment is not supported. Instead, mock ' + 'out your components that use findNodeHandle with replacements that ' + "don't rely on the native environment.");
  };
};

var MockNativeMethods = {
  measure: mockNativeFunction('measure'),
  measureInWindow: mockNativeFunction('measureInWindow'),
  measureLayout: mockNativeFunction('measureLayout'),
  setNativeProps: mockNativeFunction('setNativeProps'),
  focus: mockNativeFunction('focus'),
  blur: mockNativeFunction('blur')
};
module.exports = MockNativeMethods;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1vY2tOYXRpdmVNZXRob2RzLmpzIl0sIm5hbWVzIjpbIm1vY2tOYXRpdmVGdW5jdGlvbiIsIm1ldGhvZE5hbWUiLCJ3YXJuZWQiLCJjb25zb2xlIiwid2FybiIsIk1vY2tOYXRpdmVNZXRob2RzIiwibWVhc3VyZSIsIm1lYXN1cmVJbldpbmRvdyIsIm1lYXN1cmVMYXlvdXQiLCJzZXROYXRpdmVQcm9wcyIsImZvY3VzIiwiYmx1ciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBOztBQUVBLElBQU1BLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FBQUMsVUFBVSxFQUFJO0FBQ3ZDLE1BQUlDLE1BQU0sR0FBRyxLQUFiO0FBQ0EsU0FBTyxZQUFXO0FBQ2hCLFFBQUlBLE1BQUosRUFBWTtBQUNWO0FBQ0Q7O0FBQ0RBLElBQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLGNBQ0VILFVBREYsR0FFRSxzRUFGRixHQUdFLHFFQUhGLEdBSUUsdUNBTEo7QUFPRCxHQVpEO0FBYUQsQ0FmRDs7QUFpQkEsSUFBTUksaUJBQWlCLEdBQUc7QUFDeEJDLEVBQUFBLE9BQU8sRUFBRU4sa0JBQWtCLENBQUMsU0FBRCxDQURIO0FBRXhCTyxFQUFBQSxlQUFlLEVBQUVQLGtCQUFrQixDQUFDLGlCQUFELENBRlg7QUFHeEJRLEVBQUFBLGFBQWEsRUFBRVIsa0JBQWtCLENBQUMsZUFBRCxDQUhUO0FBSXhCUyxFQUFBQSxjQUFjLEVBQUVULGtCQUFrQixDQUFDLGdCQUFELENBSlY7QUFLeEJVLEVBQUFBLEtBQUssRUFBRVYsa0JBQWtCLENBQUMsT0FBRCxDQUxEO0FBTXhCVyxFQUFBQSxJQUFJLEVBQUVYLGtCQUFrQixDQUFDLE1BQUQ7QUFOQSxDQUExQjtBQVNBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUJSLGlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgbW9ja05hdGl2ZUZ1bmN0aW9uID0gbWV0aG9kTmFtZSA9PiB7XG4gIGxldCB3YXJuZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmICh3YXJuZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2FybmVkID0gdHJ1ZTtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnQ2FsbGluZyAuJyArXG4gICAgICAgIG1ldGhvZE5hbWUgK1xuICAgICAgICAnKCkgaW4gdGhlIHRlc3QgcmVuZGVyZXIgZW52aXJvbm1lbnQgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgbW9jayAnICtcbiAgICAgICAgJ291dCB5b3VyIGNvbXBvbmVudHMgdGhhdCB1c2UgZmluZE5vZGVIYW5kbGUgd2l0aCByZXBsYWNlbWVudHMgdGhhdCAnICtcbiAgICAgICAgXCJkb24ndCByZWx5IG9uIHRoZSBuYXRpdmUgZW52aXJvbm1lbnQuXCIsXG4gICAgKTtcbiAgfTtcbn07XG5cbmNvbnN0IE1vY2tOYXRpdmVNZXRob2RzID0ge1xuICBtZWFzdXJlOiBtb2NrTmF0aXZlRnVuY3Rpb24oJ21lYXN1cmUnKSxcbiAgbWVhc3VyZUluV2luZG93OiBtb2NrTmF0aXZlRnVuY3Rpb24oJ21lYXN1cmVJbldpbmRvdycpLFxuICBtZWFzdXJlTGF5b3V0OiBtb2NrTmF0aXZlRnVuY3Rpb24oJ21lYXN1cmVMYXlvdXQnKSxcbiAgc2V0TmF0aXZlUHJvcHM6IG1vY2tOYXRpdmVGdW5jdGlvbignc2V0TmF0aXZlUHJvcHMnKSxcbiAgZm9jdXM6IG1vY2tOYXRpdmVGdW5jdGlvbignZm9jdXMnKSxcbiAgYmx1cjogbW9ja05hdGl2ZUZ1bmN0aW9uKCdibHVyJyksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vY2tOYXRpdmVNZXRob2RzO1xuIl19