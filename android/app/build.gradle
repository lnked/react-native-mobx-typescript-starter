apply plugin: "com.android.application"
// apply plugin: 'com.google.gms.google-services'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
  entryFile: "index.js",
  bundleInRelease: true,
  resourcesDirRelease: "src/main/res"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
  // it tells Gradle what version of Android SDK to compile your app with.
  // It is recommended to compile with the latest SDK.
  compileSdkVersion Integer.parseInt(COMPILE_SDK_VERSION)
  buildToolsVersion BUILD_TOOLS_VERSION

  defaultConfig {
    applicationId "com.app"

    // it describes the minimum Android OS version that your app will support.
    // React Native supports all Android versions higher than 4.1 (API 16).
    minSdkVersion Integer.parseInt(MIN_SDK_VERSION)

    // it specifies the Android version your app is targeting.
    targetSdkVersion Integer.parseInt(TARGET_SDK_VERSION)

    // this is basically an integer number that describes your build version.
    // It is used to determine which application file is newer.
    // You will not be able to upload new .apk with this number lower or equal to the previous version.
    versionCode Integer.parseInt(APP_VERSION_CODE)

    // this is the version of your app that will be visible to users
    versionName APP_VERSION_NAME

    ndk {
      /**
       * Specifies the Application Binary Interfaces (ABI)
       * that Gradle should build outputs for and package with your APK.
       */
      abiFilters = []
    }

    packagingOptions {
      exclude 'lib/arm64-v8a/libimagepipeline.so'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    checkReleaseBuilds false
    abortOnError true
    textReport true
    lintConfig file("lint/suppressing.xml")
  }

  splits {
    abi {
      /**
       * Configures multiple APKs based on screen density.
       * Enables building multiple APKs per ABI
       */
      enable enableSeparateBuildPerCPUArchitecture

      // Resets the list of ABIs that Gradle should create APKs for to none.
      reset()

      // Specifies the two ABIs we want to generate APKs for.
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"

      /**
       * If true, Gradle generates a universal APK in addition to per-ABI APKs.
       * A universal APK contains code and resources for all ABIs in a single APK.
       * The default value is false. Note that this option is only available in the splits.abi block.
       * When building multiple APKs based on screen density, Gradle always generates a universal APK
       * that contains code and resources for all screen densities.
       */
      universalApk false
    }
  }

  buildTypes {
    release {
      // Enables code shrinking, obfuscation, and optimization for only
      // your project's release build type.
      minifyEnabled enableProguardInReleaseBuilds

      // Enables resource shrinking, which is performed by the
      // Android Gradle plugin.
      shrinkResources true

      // Includes the default ProGuard rules files that are packaged with
      // the Android Gradle plugin. To learn more, go to the section about
      // R8 configuration files.
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      debuggable true
    }
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
          output.versionCodeOverride =
                  versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }
}

dependencies {
  // Support Libraries
  implementation "com.android.support:appcompat-v7:$SUPPORT_LIB_VERSION"
  implementation "com.android.support:design:$SUPPORT_LIB_VERSION"
  implementation "com.android.support:support-v4:$SUPPORT_LIB_VERSION"

  implementation fileTree(dir: "libs", include: ["*.jar"])
  implementation ("com.facebook.react:react-native:$REACT_NATIVE_VERSION") { force = true }

  implementation project(':react-native-fs')
  implementation project(':react-native-svg')
  implementation project(':react-native-localize')
  implementation project(':react-native-code-push')
  implementation project(':react-native-permissions')
  implementation project(':react-native-device-info')
  implementation project(':react-native-vector-icons')
  implementation project(':react-native-splash-screen')
  implementation project(':react-native-gesture-handler')
  implementation project(':@react-native-community_netinfo')
  implementation project(':@react-native-community_async-storage')

  // Google Play Services
  implementation "com.google.android.gms:play-services-base:$GOOGLE_PLAY_SERVICES_VERSION"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}
